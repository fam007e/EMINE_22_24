I want to make a while loop to converge the pressure distribution such that the inlet orifices pressure loss is 25% at nominal operating conditions and predict inlet orifices pressure loss coefficient. And then, the values for pressure at each points of axial profile is stored in a list. like if rod is 4.2m long and its profile is divided into 1000 small nodes and inlet pressure is 155 bar then this pressure will be reduced by the pressure losses as we move from one node to another like for first there will be inlet pressure losses in orifices only and then it will have the other losses as we move along 4.2m at each node.

total pressure drop = Pressure in inlet - Pressure in the outlet = pressure losses in channel + pressure losses in orifices
pressure loss in orifices = inlet orifices pressure loss coefficient * G**2 / (2 * rho)



pressure losses in channel consist of:
a) pressure losses due to acceleration = -del_P_acceleration
b) pressure losses due to elevation = -del_P_elevation
c) frictional pressure losses = -del_P_friction

pressure losses in orifices consists of:
a)local pressure losses = -del_P_local

where,

del_P_elevation  = H * rho * g * np.sin(np.pi / 2)
del_P_friction = (4 * C_f * H / D_h) * (G**2 / (2 * rho))

these two below are conditionally added as pressure loss
del_P_acceleration = G**2 / (2 * rho)
del_P_local = local_loss_coef * G**2 / (2 * rho)


del_P_acceleration is taken into account when equilibrium quality,x=>0 where as it is zero for x<0

whereas del_P_local is only taken into account at inlet and outlet and other eight places equally distanced between them along the rod length 4.2m

BTW 
D_h = d_r * (((4 / np.pi) * (p / d_r)**2) - 1)
A = p**2 - (np.pi * d_r**2 / 4)
G = W / A
P_sat = 155
i_f = steam_table.hL_p()
i_g = steam_table.hV_p()
x = (i_z[i] - i_f) / (i_g - i_f) #this line will use enthalpy from a enthalpy list for i_z[i]=i_norm[i]  and i_f and i_g will be calculated from the previous pressure and enthalpy value. For example first one will just be  i_f = steam_table.hL_p(P_sat) and
i_g = steam_table.hV_p(P_sat) and the next pressure will be (P_sat - all pressure drops) put into   i_f = steam_table.hL_p() and i_g = steam_table.hV_p() to calculate x = (i_z[i] - i_f) / (i_g - i_f) and so on to find inlet orifices pressure loss coefficient which meet that aforementioned 25% criterion and then just use that value to create a final list for the pressure drop distribution like [P_sat, P_sat-inlet pressure losses in orifices, ...]

if x < 0:
    rho = steam_table.rho_ph()
    mu = steam_table.my_ph()
else:
    rho_f = steam_table.rhoL_p()
    rho_v = steam_table.rhoV_p()
    rho = rho_f / (x * ((rho_f / rho_v) - 1) + 1)
    mu_f = steam_table.my_ph()
    mu_g = steam_table.my_ph()
    mu = 1 / ((x / mu_g) + ((1 - x) / mu_f))
    Re = G * D_h / mu
if Re < 2300:
    C_f = 16 / Re
elif 1e4 < Re < 1e5:
    C_f = 0.0791 / Re**0.25
else:
    C_f = -1 / (3.6 * np.log10((k / (3.7 * D_h))**1.11 + (6.9 / Re)))**2


